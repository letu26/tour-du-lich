import axios from 'axios';
// import crypto from 'crypto';
import dotenv from "dotenv";
import nodemailer from "nodemailer";
import CryptoJS from 'crypto-js';
import moment from 'moment';
import { Request, Response } from 'express';
import Orders from '../models/order.model';
import Tours from '../models/tours.model';

dotenv.config();

const config = {
  app_id: "2553",
  key1: "PcY4iZIKFCIdgZvA6ueMcMHHUbRLYjPL",
  key2: "kLtgPl8HHhfvMuDHPwKfgfsY4Ydm9eIz",
  endpoint: "https://sb-openapi.zalopay.vn/v2/create"
};

//g·ª≠i mail
export const sendSuccessEmail = async (email: String, tourName: string, quantity: number, date: String, name: String, place: String) => {
  const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.USER,
      pass: process.env.PASSWORD
    }
  });

  const mailOptions = {
    from: process.env.USER,
    to: email,
    subject: 'üéâ ƒê·∫∑t tour th√†nh c√¥ng!',
    html: `
        <h3 style="color: white; font-size: 20px; font-weight: 700; text-align: center; background: green; border-radius: 10px; padding: 10px 0;"}>Ch√∫c m·ª´ng b·∫°n ƒë√£ ƒë·∫∑t tours th√†nh c√¥ng!</h3>
        <p style="font-size: 16px; color: #555555; ">Dear:<span style="color: green; font-weight: 600;"> ${name}</span></p>
        <p style="font-size: 16px; color: #555555;"><span style="color: #0396FF;">Sky Tour</span> r·∫•t vui v√¨ b·∫°n ƒë√£ tin t∆∞·ªüng v√† l·ª±a ch·ªçn s·ª≠ d·ª•ng d·ªãch v·ª• ƒë·∫∑t tour c·ªßa ch√∫ng t√¥i, sau ƒë√¢y l√† c√°c th√¥ng tin quan tr·ªçng v·ªÅ tour m√† b·∫°n ƒë√£ ƒë·∫∑t:</p>
        <p style="font-size: 16px;color: #555555">T√™n tour:<strong style="font-weight: 600; color: #000;"> ${tourName}</strong></p>
        <p style="font-size: 16px;color: #555555">S·ªë l∆∞·ª£ng v√©:<strong style="font-weight: 600; color: #000;"> ${quantity}</strong > </p>
        <p style="font-size: 16px;color: #555555">Th·ªùi gian kh·ªüi h√†nh:<strong style="font-weight: 600; color: #000;"> ${date}</strong> </p>
        <p style="font-size: 16px;color: #555555">ƒê·ªãa ƒëi·ªÉm kh·ªüi h√†nh:<strong style="font-weight: 600; color: #000;"> ${place}</strong > </p>
        <p style="font-size: 16px;color: #555555">Ch√∫c b·∫°n c√≥ m·ªôt chuy·∫øn ƒëi th·∫≠t vui v·∫ª! N·∫øu g·∫∑p v·∫•n ƒë·ªÅ g√¨ v·ªÅ d·ªãch v·ª•, xin vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i s·ªõm nh·∫•t ƒë·ªÉ ƒë∆∞·ª£c gi·∫£i quy·∫øt nhanh ch√≥ng, xin tr√¢n tr·ªçng c·∫£m ∆°n.</p>
    `
  };

  await transporter.sendMail(mailOptions);
};

//[POST] /api/pays/payment
export const payment = async (req: Request, res: Response): Promise<void> => {
  const price = parseInt(req.body.price);
  const id = req.body.orderID;
  const tourID = req.body.tourID;
  const userID = req.body.userID;
  const quantity = req.body.quantity;

  const embed_data = {
    redirecturl: `https://e7a7-2405-4802-1cd4-7e0-c420-88b0-3a5e-9804.ngrok-free.app/success/${userID}`
  };

  const items = [{
    orderID: id,
    tourID,
    quantity
  }];

  const transID = Math.floor(Math.random() * 1000000);
  const order = {
    app_id: config.app_id,
    app_trans_id: `${moment().format('YYMMDD')}_${transID}`,
    app_user: "user123",
    app_time: Date.now(), // miliseconds
    item: JSON.stringify(items),
    embed_data: JSON.stringify(embed_data),
    amount: price,
    description: `SkyTour - Payment for the order #${transID}`,
    bank_code: "",
    callback_url: "https://tour-du-lich.onrender.com/api/pays/callback"
  };

  const data = config.app_id + "|" + order.app_trans_id + "|" + order.app_user + "|" + order.amount + "|" + order.app_time + "|" + order.embed_data + "|" + order.item;

  (order as any).mac = CryptoJS.HmacSHA256(data, config.key1).toString();

  try {
    const result = await axios.post(config.endpoint, null, { params: order });
    res.status(200).json(result.data);
  } catch (error) {
    console.log(error.message);
  }
};

//[POST] /api/pays/callback
export const callbackpay = async (req: Request, res: Response): Promise<void> => {
  let result = {};

  try {
    const dataStr = req.body.data;
    const reqMac = req.body.mac;
    const mac = CryptoJS.HmacSHA256(dataStr, config.key2).toString();
    const items = JSON.parse(JSON.parse(dataStr).item);
    const orderID = parseInt(items[0].orderID);
    const tourID = parseInt(items[0].tourID);
    const quantity = parseInt(items[0].quantity);

    // ki·ªÉm tra callback h·ª£p l·ªá (ƒë·∫øn t·ª´ ZaloPay server)
    if (reqMac !== mac) {
      // callback kh√¥ng h·ª£p l·ªá
      (result as any).return_code = -1;
      (result as any).return_message = "mac not equal";
    }
    else {
      // thanh to√°n th√†nh c√¥ng
      //c·∫≠p nh·∫≠t tr·∫°ng th√°i cho ƒë∆°n h√†ng
      const order = await Orders.findOne({
        where: {
          id: orderID
        }
      })
      if (order) {
        await order.update({
          status: "active"
        })
      }
      const tour = await Tours.findOne({
        where: {
          id: tourID
        }
      })

      if (tour && order) {
        const updateQuantity = (tour as any).stock - Number(quantity);
        const email = (order as any).email;
        const date = (order as any).date;
        const name = (order as any).fullName;
        const place = (tour as any).startPlace;

        await tour.update({
          stock: updateQuantity
        })

        await sendSuccessEmail(email, (tour as any).title, quantity, date, name, place);
      }

      let dataJson = JSON.parse(dataStr, (config as any).key2);
      console.log("update order's status = success where app_trans_id =", dataJson["app_trans_id"]);

      (result as any).return_code = 1;
      (result as any).return_message = "success";
    }
  } catch (ex) {
    (result as any).return_code = 0; // ZaloPay server s·∫Ω callback l·∫°i (t·ªëi ƒëa 3 l·∫ßn)
    (result as any).return_message = ex.message;
  }

  // th√¥ng b√°o k·∫øt qu·∫£ cho ZaloPay server
  res.json(result);
};
